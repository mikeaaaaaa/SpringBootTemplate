name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # 仅在 main 分支触发

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            target/
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build with Maven (Test Profile)
        run: |
          mvn clean package -Ptest
          echo "Build complete."
          ls -l ./target/*.jar

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: service-jar
          path: target/*.jar

  build-image:
    name: Build Docker Image
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: service-jar
          path: docker/service/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          mkdir -p docker/service/config
          bash ./docker/service/docker-image-build.sh
          echo "Docker image built and pushed."

  deploy:
    name: Deploy Service
    needs: build-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy Config Files
        run: |
          mkdir -p docker/service/config
          cp config/application.yml docker/service/config/
          cp config/application-test.yml docker/service/config/

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /opt/service
            docker-compose down
            docker-compose up -d
            sleep 30
            docker inspect -f '{{.State.Running}}' springboot-init | grep true || (echo "Container is not running" && docker logs springboot-init && exit 1)
            echo "Deployment successful."