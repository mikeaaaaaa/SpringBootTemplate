# # This file is a template, and might need editing before it works on your project.
# # This is a sample GitLab CI/CD configuration file that should run without any modifications.
# # It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# # it uses echo commands to simulate the pipeline execution.
# #
# # A pipeline is composed of independent jobs that run scripts, grouped into stages.
# # Stages run in sequential order, but jobs within stages run in parallel.
# #
# # For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
# #
# # You can copy and paste this template into a new `.gitlab-ci.yml` file.
# # You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# #
# # To contribute improvements to CI/CD templates, please follow the Development guide at:
# # https://docs.gitlab.com/ee/development/cicd/templates.html
# # This specific template is located at:
# # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
# # To contribute improvements to CI/CD templates, please follow the Development guide at:
# # https://docs.gitlab.com/ee/development/cicd/templates.html
# # This specific template is located at:
# # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# # Build JAVA applications using Apache Maven (http://maven.apache.org)
# # For docker image tags see https://hub.docker.com/_/maven/
# #
# # For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# # This template will build and test your projects
# # * Caches downloaded dependencies and plugins between invocation.
# # * Verify but don't deploy merge requests.
# # * Deploy built artifacts from master branch only.

# variables:
#   # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
#   MAVEN_OPTS: >-
#     -Dhttps.protocols=TLSv1.2
#     -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
#     -Dorg.slf4j.simpleLogger.showDateTime=true
#     -Djava.awt.headless=true

#   # As of Maven 3.3.0 instead of this you MAY define these options in `.mvn/maven.config` so the same config is used
#   # when running from the command line.
#   # As of Maven 3.6.1, the use of `--no-tranfer-progress` (or `-ntp`) suppresses download and upload messages. The use
#   # of the `Slf4jMavenTransferListener` is no longer necessary.
#   # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
#   MAVEN_CLI_OPTS: >-
#     --batch-mode
#     --errors
#     --fail-at-end
#     --show-version
#     --no-transfer-progress
#     -DinstallAtEnd=true
#     -DdeployAtEnd=true

# # This template uses the latest Maven 3 release, e.g., 3.8.6, and OpenJDK 8 (LTS)
# # for verifying and deploying images
# # Maven 3.8.x REQUIRES HTTPS repositories.
# # See https://maven.apache.org/docs/3.8.1/release-notes.html#how-to-fix-when-i-get-a-http-repository-blocked for more.
# image: maven:3-openjdk-8

# # Cache downloaded dependencies and plugins between builds.
# # To keep cache across branches add 'key: "$CI_JOB_NAME"'
# # Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
# # increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
# cache:
#   paths:
#     - .m2/repository

# # For merge requests do not `deploy` but only run `verify`.
# # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
# .verify:
#   stage: test
#   script:
#     - 'mvn $MAVEN_CLI_OPTS verify'
#   except:
#     variables:
#       - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# # Verify merge requests using JDK8
# verify:jdk8:
#   extends:
#     - .verify

# # To deploy packages from CI, create a `ci_settings.xml` file
# # For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# # Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# # For `master` or `main` branch run `mvn deploy` automatically.
# deploy:jdk8:
#   stage: deploy
#   script:
#     - if [ ! -f ci_settings.xml ]; then
#         echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
#       fi
#     - 'mvn $MAVEN_CLI_OPTS deploy --settings ci_settings.xml'
#   only:
#     variables:
#       - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

# 编译步骤
mvn-build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    ## 打包 Service Project 为 jar包， 同时在测试过程中激活test profile（这里是maven的test profile，区别于springboot的profile）
    - mvn clean package -Ptest
    - echo "build complete."
    - ls ./target
  cache:
    - paths:
        - ./target
  artifacts:
    paths:
      - target/*.jar
# 构建镜像步骤
make-deploy-image-job:
  stage: deploy
  only:
    - main # 仅在 main 分支触发
  needs:
    - mvn-build-job
  script:
    - mkdir docker/service/build
    - bash ./docker/service/docker-image-build.sh
    - echo "Compile ok!"
# 部署步骤
deploy-job:
  stage: deploy
  only:
    - main # 仅在 dev 分支触发
  needs:
    - make-deploy-image-job
  script:
    - mkdir -p docker/service/config
    - cp config/application.yml docker/service/config/application.yml
    - cp config/application-test.yml docker/service/config/application-test.yml
    - cd docker/service/ && bash docker-run.sh
    - CONTAINER_ID=springboot-init
    - sleep 30
    - docker inspect -f '{{.State.Running}}' $CONTAINER_ID | grep true || (echo "Container is not running" && docker logs $CONTAINER_ID && exit 1)
    - echo "Container is running"
    - echo "Run ok!"